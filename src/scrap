import java.io.*;
import java.net.*;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Scanner;

public class Mallory extends Principal {
	private static final String MACHANNEL = "machannel.txt";
	private static final String MBCHANNEL = "mbchannel.txt";
	private static final String AMCHANNEL = "amchannel.txt";
	private static final String BMCHANNEL = "abchannel.txt";
	private static final String ABARCHIVE = "abarchive.txt";
	
	private static final String BPUBFILE = "pubKB.txt";
	private static final String APUBFILE = "pubKA.txt";
	private static final String MPUBFILE = "pubKM.txt";
	private static final String MPRIFILE = "priKM.txt";

	
	private PublicKey pubK;
	private PrivateKey privK;
	private PublicKey pubKA;
	private PublicKey pubKB;
	//private Client conn;
	
	public Mallory(String portNumber) throws UnknownHostException, IOException {
		pubK = readPubKey(MPUBFILE);
		privK = readPriKey(MPRIFILE);
		otherPubK1 = readPubKey(APUBFILE);
		otherPubK2 = readPubKey(BPUBFILE);
		//conn = new Client(portNumber);
		S = "Mallory>> ";
	}

	public static void main(String[] args) {
		Mallory mal;
		try {
			mal = new Mallory(args[0]);
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
			return;
		} catch (UnknownHostException e) {
			System.out.println(e);
			return;
		} catch (IOException e) {
			System.out.println(e);
			return;
		}
		
		//the server side of Mallory that receive things from Alice 
		//mallery's port number is 9090
		int malloryPortNumber = 9090;
		ServerSocket serverMallory = null;
		String line;
		DataOutputStream outStream = null;
		BufferedReader inputStream = null;
		Socket clientSocket = null;
		Socket malloryClientSocket = null;
		// Try to open a server socket on port
		try {
			serverMallory = new ServerSocket(malloryPortNumber);
		}
		catch (IOException e) {
			System.out.println(e);
		}   
		// Create a client socket for Alice
		try {
			malloryClientSocket = serverMallory.accept();
			clientSocket = serverMallory.accept();
			inputStream = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
			outStream = new DataOutputStream(malloryClientSocket.getOutputStream());
			while (true) {
				if (inputStream.ready()) {
					line = inputStream.readLine();
					outStream.writeBytes(line);
					//mal.print(line);
				}
			}
		}   
		catch (IOException e) {
			System.out.println(e);
		}
		
		//the client side of Mallory that tries to sends things to Bob
		int givenPortNumber = Integer.parseInt(args[0]);
		Socket bobSocket = null;  
		Socket mallorySocket = null; 
		DataOutputStream malloryOutStream = null;
		BufferedReader malloryInStream = null;
		//try to connect to port given
		try {
			bobSocket = new Socket("localhost", givenPortNumber);
			mallorySocket = new Socket("", 9090);
			malloryOutStream = new DataOutputStream(bobSocket.getOutputStream());
			malloryInStream = new BufferedReader(new InputStreamReader(mallorySocket.getInputStream()));
		} catch (UnknownHostException e) {
			System.out.println("unknown host");
		} catch (IOException e) {
			System.out.println("io error");
		}

		if (bobSocket != null && malloryOutStream != null && malloryInStream != null && mallorySocket != null) {
			try {
				//filler text sent to bob 
				//TO-DO: This need to be revised to allow for Mallory to do more things
				String response = malloryInStream.readLine();
				malloryOutStream.writeBytes(response);
				
				//mal.print(line);
				//malloryOutStream.writeBytes("HELLO FROM MALLORY\n");    
				//malloryOutStream.writeBytes("BYE FROM MALLORY\n");     
				
				//Remember to close everything
				malloryOutStream.close();
				malloryInStream.close();
				bobSocket.close();   
				mallorySocket.close();
			} catch (UnknownHostException e) {
				System.out.println(e);
			}
			catch (IOException e) {
				System.out.println(e);
			}
			catch (NumberFormatException e) {
				System.out.println(e);
			}
			catch (ArrayIndexOutOfBoundsException e) {
				System.out.println(e);
			}
		}

	}
}
